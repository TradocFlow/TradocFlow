    Checking tradocflow v0.1.0 (/home/jo/tradocflow)
warning: unused import: `DocumentMetadata as LibDocumentMetadata`
 --> src/document_import_service.rs:1:39
  |
1 | use crate::{Document, DocumentStatus, DocumentMetadata as LibDocumentMetadata, DocumentImportRequest, DocumentImportResult, TradocumentEr...
  |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `ProjectSettings` and `ValidationError`
  --> src/services/project_service.rs:10:47
   |
10 |     TranslationProject, TeamMember, UserRole, ProjectSettings, ValidationError
   |                                               ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused import: `Mutex`
 --> src/services/translation_memory_service.rs:2:22
  |
2 | use std::sync::{Arc, Mutex};
  |                      ^^^^^

warning: unused import: `HashSet`
 --> src/services/translation_memory_service.rs:3:33
  |
3 | use std::collections::{HashMap, HashSet};
  |                                 ^^^^^^^

warning: unused imports: `Float32Array`, `Int64Array`, `RecordBatch`, `StringArray`, and `UInt64Array`
  --> src/services/translation_memory_service.rs:11:20
   |
11 | use arrow::array::{RecordBatch, StringArray, Float32Array, Int64Array, UInt64Array};
   |                    ^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^

warning: unused imports: `ChunkType` and `TranslationUnitParquet`
  --> src/services/translation_memory_service.rs:18:51
   |
18 |     TranslationUnit, LanguagePair, ChunkMetadata, ChunkType, TranslationUnitParquet
   |                                                   ^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ValidationError`
 --> src/services/chapter_service.rs:1:80
  |
1 | use crate::models::translation_models::{Chapter, ChapterStatus, ChunkMetadata, ValidationError};
  |                                                                                ^^^^^^^^^^^^^^^

warning: unused import: `Path`
 --> src/services/chapter_service.rs:5:17
  |
5 | use std::path::{Path, PathBuf};
  |                 ^^^^

warning: unused imports: `ChunkType` and `TranslationProject`
 --> src/services/document_import_service.rs:1:41
  |
1 | use crate::models::translation_models::{TranslationProject, Chapter, ChunkMetadata, ChunkType, ChapterStatus};
  |                                         ^^^^^^^^^^^^^^^^^^                          ^^^^^^^^^

warning: unused import: `ChunkingStrategy`
 --> src/services/document_import_service.rs:3:72
  |
3 | use crate::services::chunk_processor::{ChunkProcessor, ChunkingConfig, ChunkingStrategy};
  |                                                                        ^^^^^^^^^^^^^^^^

warning: unused imports: `ChunkMetadata`, `ChunkType`, `TranslationUnit`, and `ValidationError`
 --> src/services/chunk_linking_service.rs:9:41
  |
9 | use crate::models::translation_models::{ChunkMetadata, ChunkType, ValidationError, TranslationUnit};
  |                                         ^^^^^^^^^^^^^  ^^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused import: `ConsistencyCheckResult`
 --> src/gui/terminology_bridge.rs:9:58
  |
9 |     TermHighlight, HighlightType, TerminologySuggestion, ConsistencyCheckResult
  |                                                          ^^^^^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/document_import_service.rs:259:13
    |
259 |         let mut warnings = Vec::new();
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `project`
   --> src/services/project_service.rs:164:46
    |
164 |     async fn create_project_structure(&self, project: &TranslationProject, request: &CreateProjectRequest) -> Result<bool> {
    |                                              ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_project`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `unit`
   --> src/services/translation_memory_service.rs:765:49
    |
765 |     pub async fn append_translation_unit(&self, unit: TranslationUnit) -> Result<()> {
    |                                                 ^^^^ help: if this is intentional, prefix it with an underscore: `_unit`

warning: unused variable: `units`
   --> src/services/translation_memory_service.rs:771:56
    |
771 |     pub async fn append_translation_units_batch(&self, units: Vec<TranslationUnit>) -> Result<()> {
    |                                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_units`

warning: unused variable: `language`
   --> src/services/terminology_highlighting_service.rs:102:9
    |
102 |         language: &str,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_language`

warning: unused variable: `language`
   --> src/services/terminology_highlighting_service.rs:177:9
    |
177 |         language: &str,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_language`

warning: unused variable: `config`
   --> src/services/document_import_service.rs:556:9
    |
556 |         config: &ImportConfig,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: unused variable: `phrase_group`
   --> src/services/chunk_linking_service.rs:400:58
    |
400 |     async fn update_translation_memory_for_phrase(&self, phrase_group: &LinkedPhraseGroup) -> Result<()> {
    |                                                          ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_phrase_group`

warning: unused variable: `import_service`
    --> src/gui/app.rs:2021:21
     |
2021 |             let mut import_service = self.document_import_service.lock().map_err(|_|
     |                     ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_import_service`

warning: unused variable: `config`
    --> src/gui/app.rs:2031:17
     |
2031 |             let config = ImportConfig {
     |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: variable does not need to be mutable
    --> src/gui/app.rs:2021:17
     |
2021 |             let mut import_service = self.document_import_service.lock().map_err(|_|
     |                 ----^^^^^^^^^^^^^^
     |                 |
     |                 help: remove this `mut`

warning: unused variable: `project`
   --> src/gui/state.rs:929:21
    |
929 |         if let Some(project) = self.get_current_project().await {
    |                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_project`

warning: unused variable: `chapter_data`
   --> src/git_integration/workflow_manager.rs:251:13
    |
251 |         let chapter_data = self.load_or_create_chapter_data(chapter, language).await?;
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_chapter_data`

warning: unused variable: `pr_id`
   --> src/git_integration/workflow_manager.rs:406:9
    |
406 |         pr_id: u64,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_pr_id`

warning: unused variable: `chapter`
   --> src/git_integration/workflow_manager.rs:605:9
    |
605 |         chapter: &str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_chapter`

error[E0308]: mismatched types
   --> src/services/document_import_service.rs:391:20
    |
391 |             if let Some(style_val) = &style.val {
    |                    ^^^^^^^^^^^^^^^   ---------- this expression has type `&std::string::String`
    |                    |
    |                    expected `String`, found `Option<_>`
    |
    = note: expected struct `std::string::String`
                 found enum `std::option::Option<_>`

error[E0616]: field `val` of struct `docx_rs::Bold` is private
   --> src/services/document_import_service.rs:416:37
    |
416 | ...                   if bold.val.unwrap_or(false) {
    |                               ^^^ private field

error[E0616]: field `val` of struct `docx_rs::Italic` is private
   --> src/services/document_import_service.rs:421:39
    |
421 | ...                   if italic.val.unwrap_or(false) {
    |                                 ^^^ private field

error[E0609]: no field `children` on type `&docx_rs::Table`
   --> src/services/document_import_service.rs:483:35
    |
483 |         for table_child in &table.children {
    |                                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `rows`, `grid`, `has_numbering`, `property`

error[E0609]: no field `children` on type `docx_rs::TableRow`
   --> src/services/document_import_service.rs:488:43
    |
488 |                     for row_child in &row.children {
    |                                           ^^^^^^^^ unknown field
    |
    = note: available fields are: `cells`, `has_numbering`, `property`

error: future cannot be sent between threads safely
   --> src/gui/app.rs:394:34
    |
394 |                       tokio::spawn(async move {
    |  __________________________________^
395 | |                         if let Some(window) = window_weak.upgrade() {
396 | |                             window.set_status_message("Opening import dialog...".into());
397 | |                             window.set_status_type("info".into());
...   |
526 | |                     });
    | |_____________________^ future created by async block is not `Send`
    |
    = help: within `duckdb::Connection`, the trait `Sync` is not implemented for `RefCell<duckdb::inner_connection::InnerConnection>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: captured value is not `Send`
   --> src/gui/app.rs:461:43
    |
461 | ...                   match document_import_service.lock() {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^ has type `Arc<std::sync::Mutex<services::document_import_service::DocumentImportService>>` which is not `Send`
note: required by a bound in `tokio::spawn`
   --> /home/jo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/task/spawn.rs:168:21
    |
166 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
167 |     where
168 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

error: future cannot be sent between threads safely
   --> src/gui/app.rs:394:34
    |
394 |                       tokio::spawn(async move {
    |  __________________________________^
395 | |                         if let Some(window) = window_weak.upgrade() {
396 | |                             window.set_status_message("Opening import dialog...".into());
397 | |                             window.set_status_type("info".into());
...   |
526 | |                     });
    | |_____________________^ future created by async block is not `Send`
    |
    = help: within `duckdb::Connection`, the trait `Sync` is not implemented for `RefCell<hashlink::lru_cache::LruCache<Arc<str>, duckdb::raw_statement::RawStatement>>`
    = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` instead
note: captured value is not `Send`
   --> src/gui/app.rs:461:43
    |
461 | ...                   match document_import_service.lock() {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^ has type `Arc<std::sync::Mutex<services::document_import_service::DocumentImportService>>` which is not `Send`
note: required by a bound in `tokio::spawn`
   --> /home/jo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/task/spawn.rs:168:21
    |
166 |     pub fn spawn<F>(future: F) -> JoinHandle<F::Output>
    |            ----- required by a bound in this function
167 |     where
168 |         F: Future + Send + 'static,
    |                     ^^^^ required by this bound in `spawn`

warning: unused import: `arrow::array::Array`
  --> src/services/translation_memory_service.rs:10:5
   |
10 | use arrow::array::Array;
   |     ^^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/document_import_service.rs:836:13
    |
836 |         let mut processed = content;
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `delimiter_pattern`
   --> src/services/chunk_processor.rs:255:13
    |
255 |         let delimiter_pattern = delimiters.join("|");
    |             ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_delimiter_pattern`

warning: unused variable: `project_service`
    --> src/gui/app.rs:1080:17
     |
1080 |             let project_service = project_service.clone();
     |                 ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_project_service`

warning: unused variable: `project_service`
    --> src/gui/app.rs:1123:17
     |
1123 |             let project_service = project_service.clone();
     |                 ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_project_service`

warning: unused variable: `source_language`
   --> src/git_integration/toml_data.rs:659:9
    |
659 |         source_language: String,
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_source_language`

warning: unused variable: `commit`
   --> src/git_integration/diff_tools.rs:261:9
    |
261 |         commit: &git2::Commit,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_commit`

warning: unused variable: `chapter`
   --> src/git_integration/diff_tools.rs:262:9
    |
262 |         chapter: &str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_chapter`

error[E0433]: failed to resolve: use of undeclared type `TableCellChild`
   --> src/services/document_import_service.rs:496:41
    |
496 | ...                   TableCellChild::Paragraph(p) => {
    |                       ^^^^^^^^^^^^^^
    |                       |
    |                       use of undeclared type `TableCellChild`
    |                       help: an enum with a similar name exists: `TableChild`

Some errors have detailed explanations: E0308, E0433, E0609, E0616.
For more information about an error, try `rustc --explain E0308`.
warning: `tradocflow` (lib) generated 35 warnings
error: could not compile `tradocflow` (lib) due to 8 previous errors; 35 warnings emitted
