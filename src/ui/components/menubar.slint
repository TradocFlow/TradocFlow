import { Colors } from "../styles/colors.slint";
import { Theme } from "../styles/default.slint";

struct MenuItem {
    text: string,
    shortcut: string,
    enabled: bool,
    separator: bool,
}

component DropdownMenu inherits Rectangle {
    in property <[MenuItem]> items;
    in property <bool> show-dropdown: false;
    callback item-clicked(string);
    
    width: 200px;
    height: items.length * 24px + 8px;
    z: 1000;
    
    if root.show-dropdown: Rectangle {
        background: Colors.surface;
        border-width: 1px;
        border-color: Colors.border;
        border-radius: Theme.border-radius-sm;
        drop-shadow-blur: 8px;
        drop-shadow-color: #00000040;
        
        VerticalLayout {
            padding: 4px;
            
            for item[index] in root.items: Rectangle {
                height: item.separator ? 8px : 24px;
                
                if item.separator: Rectangle {
                    height: 1px;
                    background: Colors.border;
                    y: (parent.height - self.height) / 2;
                }
                
                if !item.separator: TouchArea {
                    clicked => {
                        if (item.enabled) {
                            root.item-clicked(item.text);
                        }
                    }
                    
                    Rectangle {
                        background: parent.has-hover && item.enabled ? Colors.surface-hover : transparent;
                        
                        HorizontalLayout {
                            padding-left: 12px;
                            padding-right: 12px;
                            alignment: space-between;
                            
                            Text {
                                text: item.text;
                                font-size: Theme.font-size-small;
                                color: item.enabled ? Colors.text-primary : Colors.text-muted;
                                vertical-alignment: center;
                            }
                            
                            if item.shortcut != "": Text {
                                text: item.shortcut;
                                font-size: Theme.font-size-small;
                                color: Colors.text-muted;
                                vertical-alignment: center;
                            }
                        }
                    }
                }
            }
        }
    }
}

component MenuButton inherits Rectangle {
    in property <string> text;
    in property <[MenuItem]> menu-items;
    callback item-selected(string);
    
    property <bool> is-open: false;
    
    width: text-label.preferred-width + 16px;
    height: Theme.menubar-height;
    
    states [
        hover when touch-area.has-hover: {
            background: Colors.surface-hover;
        }
        pressed when touch-area.pressed: {
            background: Colors.primary-light;
        }
        open when root.is-open: {
            background: Colors.primary-light;
        }
    ]
    
    touch-area := TouchArea {
        clicked => {
            root.is-open = !root.is-open;
        }
    }
    
    text-label := Text {
        text: root.text;
        font-size: Theme.font-size-base;
        color: Colors.text-primary;
        vertical-alignment: center;
        horizontal-alignment: center;
    }
    
    dropdown := DropdownMenu {
        items: root.menu-items;
        show-dropdown: root.is-open;
        x: 0;
        y: root.height;
        
        item-clicked(item) => {
            root.item-selected(item);
            root.is-open = false;
        }
    }
}

export component MenuBar inherits Rectangle {
    // Callbacks for menu actions
    callback file-new();
    callback file-open();
    callback file-save();
    callback file-save-as();
    callback file-import();
    callback file-export();
    callback file-print();
    callback file-exit();
    
    callback edit-undo();
    callback edit-redo();
    callback edit-cut();
    callback edit-copy();
    callback edit-paste();
    callback edit-find();
    callback edit-replace();
    callback edit-preferences();
    
    callback view-toggle-mode();
    callback view-single-pane();
    callback view-horizontal-split();
    callback view-vertical-split();
    callback view-fullscreen();
    callback view-zoom-in();
    callback view-zoom-out();
    callback view-show-sidebar();
    
    callback project-new();
    callback project-open();
    callback project-save();
    callback project-close();
    callback project-properties();
    
    callback translation-add-language();
    callback translation-manage();
    callback translation-export();
    callback translation-import();
    callback translation-validate();
    
    callback tools-screenshot();
    callback tools-spell-check();
    callback tools-word-count();
    callback tools-export-pdf();
    callback tools-export-html();
    
    callback help-about();
    callback help-shortcuts();
    callback help-documentation();
    callback help-support();
    
    height: Theme.menubar-height;
    background: Colors.surface;
    border-width: 1px;
    border-color: Colors.border;
    
    HorizontalLayout {
        padding: 8px;
        spacing: 4px;
        
        MenuButton {
            text: "File";
            menu-items: [
                { text: "New Document", shortcut: "Ctrl+N" },
                { text: "Open...", shortcut: "Ctrl+O" },
                { separator: true },
                { text: "Save", shortcut: "Ctrl+S" },
                { text: "Save As...", shortcut: "Ctrl+Shift+S" },
                { separator: true },
                { text: "Import Document...", shortcut: "" },
                { text: "Export...", shortcut: "Ctrl+E" },
                { text: "Print...", shortcut: "Ctrl+P" },
                { separator: true },
                { text: "Exit", shortcut: "Ctrl+Q" }
            ];
            
            item-selected(item) => {
                if (item == "New Document") { root.file-new(); }
                else if (item == "Open...") { root.file-open(); }
                else if (item == "Save") { root.file-save(); }
                else if (item == "Save As...") { root.file-save-as(); }
                else if (item == "Import Document...") { root.file-import(); }
                else if (item == "Export...") { root.file-export(); }
                else if (item == "Print...") { root.file-print(); }
                else if (item == "Exit") { root.file-exit(); }
            }
        }
        
        MenuButton {
            text: "Edit";
            menu-items: [
                { text: "Undo", shortcut: "Ctrl+Z" },
                { text: "Redo", shortcut: "Ctrl+Y" },
                { separator: true },
                { text: "Cut", shortcut: "Ctrl+X" },
                { text: "Copy", shortcut: "Ctrl+C" },
                { text: "Paste", shortcut: "Ctrl+V" },
                { separator: true },
                { text: "Find...", shortcut: "Ctrl+F" },
                { text: "Replace...", shortcut: "Ctrl+H" },
                { separator: true },
                { text: "Preferences...", shortcut: "" }
            ];
            
            item-selected(item) => {
                if (item == "Undo") { root.edit-undo(); }
                else if (item == "Redo") { root.edit-redo(); }
                else if (item == "Cut") { root.edit-cut(); }
                else if (item == "Copy") { root.edit-copy(); }
                else if (item == "Paste") { root.edit-paste(); }
                else if (item == "Find...") { root.edit-find(); }
                else if (item == "Replace...") { root.edit-replace(); }
                else if (item == "Preferences...") { root.edit-preferences(); }
            }
        }
        
        MenuButton {
            text: "View";
            menu-items: [
                { text: "Toggle Mode", shortcut: "Ctrl+M" },
                { separator: true },
                { text: "Single Pane", shortcut: "Ctrl+1" },
                { text: "Horizontal Split", shortcut: "Ctrl+2" },
                { text: "Vertical Split", shortcut: "Ctrl+3" },
                { separator: true },
                { text: "Fullscreen", shortcut: "F11" },
                { text: "Zoom In", shortcut: "Ctrl++" },
                { text: "Zoom Out", shortcut: "Ctrl+-" },
                { separator: true },
                { text: "Show Sidebar", shortcut: "Ctrl+\\" }
            ];
            
            item-selected(item) => {
                if (item == "Toggle Mode") { root.view-toggle-mode(); }
                else if (item == "Single Pane") { root.view-single-pane(); }
                else if (item == "Horizontal Split") { root.view-horizontal-split(); }
                else if (item == "Vertical Split") { root.view-vertical-split(); }
                else if (item == "Fullscreen") { root.view-fullscreen(); }
                else if (item == "Zoom In") { root.view-zoom-in(); }
                else if (item == "Zoom Out") { root.view-zoom-out(); }
                else if (item == "Show Sidebar") { root.view-show-sidebar(); }
            }
        }
        
        MenuButton {
            text: "Project";
            menu-items: [
                { text: "New Project...", shortcut: "Ctrl+Shift+N" },
                { text: "Open Project...", shortcut: "Ctrl+Shift+O" },
                { text: "Save Project", shortcut: "Ctrl+Shift+S" },
                { text: "Close Project", shortcut: "" },
                { separator: true },
                { text: "Project Properties...", shortcut: "" }
            ];
            
            item-selected(item) => {
                if (item == "New Project...") { root.project-new(); }
                else if (item == "Open Project...") { root.project-open(); }
                else if (item == "Save Project") { root.project-save(); }
                else if (item == "Close Project") { root.project-close(); }
                else if (item == "Project Properties...") { root.project-properties(); }
            }
        }
        
        MenuButton {
            text: "Translation";
            menu-items: [
                { text: "Add Language...", shortcut: "" },
                { text: "Manage Languages...", shortcut: "" },
                { separator: true },
                { text: "Export Translations...", shortcut: "" },
                { text: "Import Translations...", shortcut: "" },
                { separator: true },
                { text: "Validate Translations", shortcut: "" }
            ];
            
            item-selected(item) => {
                if (item == "Add Language...") { root.translation-add-language(); }
                else if (item == "Manage Languages...") { root.translation-manage(); }
                else if (item == "Export Translations...") { root.translation-export(); }
                else if (item == "Import Translations...") { root.translation-import(); }
                else if (item == "Validate Translations") { root.translation-validate(); }
            }
        }
        
        MenuButton {
            text: "Tools";
            menu-items: [
                { text: "Take Screenshot", shortcut: "F12" },
                { text: "Spell Check", shortcut: "F7" },
                { text: "Word Count", shortcut: "" },
                { separator: true },
                { text: "Export to PDF...", shortcut: "" },
                { text: "Export to HTML...", shortcut: "" }
            ];
            
            item-selected(item) => {
                if (item == "Take Screenshot") { root.tools-screenshot(); }
                else if (item == "Spell Check") { root.tools-spell-check(); }
                else if (item == "Word Count") { root.tools-word-count(); }
                else if (item == "Export to PDF...") { root.tools-export-pdf(); }
                else if (item == "Export to HTML...") { root.tools-export-html(); }
            }
        }
        
        MenuButton {
            text: "Help";
            menu-items: [
                { text: "About Tradocument", shortcut: "" },
                { text: "Keyboard Shortcuts", shortcut: "F1" },
                { text: "Documentation", shortcut: "" },
                { text: "Support", shortcut: "" }
            ];
            
            item-selected(item) => {
                if (item == "About Tradocument") { root.help-about(); }
                else if (item == "Keyboard Shortcuts") { root.help-shortcuts(); }
                else if (item == "Documentation") { root.help-documentation(); }
                else if (item == "Support") { root.help-support(); }
            }
        }
    }
}