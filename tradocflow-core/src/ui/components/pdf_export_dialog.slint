import { Button, ComboBox, CheckBox, LineEdit, ScrollView, SpinBox } from "std-widgets.slint";

export enum PaperFormat {
    A4,
    Letter,
    Legal,
    A3,
    A5,
    Custom,
}

export enum Orientation {
    Portrait,
    Landscape,
}

export enum LinkHandling {
    Preserve,
    RemoveFormatting,
    ConvertToFootnotes,
}

export enum ImageQuality {
    Low,
    Medium,
    High,
    Original,
}

export struct PdfExportConfig {
    // Paper settings
    paper-format: PaperFormat,
    orientation: Orientation,
    custom-width: int,
    custom-height: int,
    
    // Margins (in mm)
    margin-top: int,
    margin-bottom: int,
    margin-left: int,
    margin-right: int,
    
    // Font settings
    base-font: string,
    font-size: int,
    line-height: int,
    
    // Content options
    include-toc: bool,
    include-page-numbers: bool,
    include-headers-footers: bool,
    header-text: string,
    footer-text: string,
    syntax-highlighting: bool,
    preserve-code-formatting: bool,
    
    // Link handling
    link-handling: LinkHandling,
    
    // Image quality
    image-quality: ImageQuality,
    
    // Metadata
    document-title: string,
    document-author: string,
    document-subject: string,
}

export struct PdfExportProgress {
    visible: bool,
    stage: string,
    progress-percent: int,
    current-item: string,
    items-completed: int,
    total-items: int,
    message: string,
    warnings: [string],
    can-cancel: bool,
}

component SectionHeader inherits Rectangle {
    in property <string> title;
    height: 30px;
    
    Text {
        text: title;
        color: #333;
        font-size: 14px;
        font-weight: 600;
        x: 5px;
        y: 8px;
    }
    
    Rectangle {
        y: 25px;
        height: 1px;
        background: #ddd;
        width: parent.width;
    }
}

component FormRow inherits Rectangle {
    in property <string> label;
    in-out property <string> value;
    in property <bool> enabled: true;
    height: 35px;
    
    Text {
        text: label + ":";
        color: enabled ? #333 : #999;
        font-size: 12px;
        x: 5px;
        y: 10px;
        width: 120px;
    }
    
    LineEdit {
        x: 130px;
        y: 5px;
        width: parent.width - 140px;
        height: 25px;
        text: value;
        enabled: enabled;
        
        edited(text) => {
            value = text;
        }
    }
}

component FormRowCombo inherits Rectangle {
    in property <string> label;
    in-out property <int> current-index;
    in property <[string]> model;
    in property <bool> enabled: true;
    height: 35px;
    
    Text {
        text: label + ":";
        color: enabled ? #333 : #999;
        font-size: 12px;
        x: 5px;
        y: 10px;
        width: 120px;
    }
    
    ComboBox {
        x: 130px;
        y: 5px;
        width: parent.width - 140px;
        height: 25px;
        model: model;
        current-index: current-index;
        enabled: enabled;
        
        selected(index) => {
            current-index = index;
        }
    }
}

component FormRowSpin inherits Rectangle {
    in property <string> label;
    in-out property <int> value;
    in property <int> minimum: 0;
    in property <int> maximum: 1000;
    in property <bool> enabled: true;
    height: 35px;
    
    Text {
        text: label + ":";
        color: enabled ? #333 : #999;
        font-size: 12px;
        x: 5px;
        y: 10px;
        width: 120px;
    }
    
    SpinBox {
        x: 130px;
        y: 5px;
        width: parent.width - 140px;
        height: 25px;
        value: value;
        minimum: minimum;
        maximum: maximum;
        enabled: enabled;
        
        edited(val) => {
            value = val;
        }
    }
}

component FormRowCheck inherits Rectangle {
    in property <string> label;
    in-out property <bool> checked;
    in property <bool> enabled: true;
    height: 30px;
    
    CheckBox {
        x: 5px;
        y: 5px;
        text: label;
        checked: checked;
        enabled: enabled;
        
        toggled => {
            checked = !checked;
        }
    }
}

export component PdfExportProgressDialog inherits Rectangle {
    in-out property <PdfExportProgress> progress;
    
    callback cancel-export();
    
    if progress.visible: Rectangle {
        width: 500px;
        height: 400px;
        background: white;
        border-width: 2px;
        border-color: #007bff;
        border-radius: 8px;
        drop-shadow-blur: 10px;
        drop-shadow-color: #00000040;
        z: 2000;
        
        // Center on screen
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        
        // Title bar
        Rectangle {
            height: 40px;
            background: #007bff;
            border-radius: 6px;
            
            Text {
                text: "Exporting PDF";
                color: white;
                font-size: 14px;
                font-weight: 600;
                x: 15px;
                y: 12px;
            }
        }
        
        // Content area
        ScrollView {
            y: 40px;
            height: parent.height - 80px;
            x: 15px;
            width: parent.width - 30px;
            
            Rectangle {
                height: 320px;
                
                // Current stage
                Text {
                    text: "Stage: " + progress.stage;
                    color: #333;
                    font-size: 12px;
                    font-weight: 600;
                    y: 10px;
                }
                
                // Current item
                Text {
                    text: progress.current-item;
                    color: #666;
                    font-size: 11px;
                    y: 30px;
                    width: parent.width;
                    overflow: elide;
                }
                
                // Progress bar
                Rectangle {
                    y: 55px;
                    width: parent.width;
                    height: 20px;
                    background: #f0f0f0;
                    border-width: 1px;
                    border-color: #ddd;
                    border-radius: 10px;
                    
                    Rectangle {
                        width: (parent.width * progress.progress-percent) / 100;
                        height: parent.height;
                        background: #007bff;
                        border-radius: 10px;
                    }
                }
                
                // Progress info
                Text {
                    text: progress.progress-percent + "% (" + progress.items-completed + "/" + progress.total-items + ")";
                    color: #333;
                    font-size: 11px;
                    y: 80px;
                    horizontal-alignment: center;
                    width: parent.width;
                }
                
                // Message
                Text {
                    text: progress.message;
                    color: #666;
                    font-size: 11px;
                    y: 105px;
                    width: parent.width;
                    wrap: word-wrap;
                    height: 40px;
                }
                
                // Warnings section
                if progress.warnings.length > 0: Rectangle {
                    y: 150px;
                    width: parent.width;
                    height: 120px;
                    
                    Text {
                        text: "⚠️ Warnings (" + progress.warnings.length + "):";
                        color: #ff8c00;
                        font-size: 11px;
                        font-weight: 600;
                    }
                    
                    ScrollView {
                        y: 20px;
                        width: parent.width;
                        height: 100px;
                        
                        Rectangle {
                            height: progress.warnings.length * 20px;
                            
                            for warning[i] in progress.warnings: Text {
                                text: "• " + warning;
                                color: #ff8c00;
                                font-size: 10px;
                                y: i * 20px;
                                width: parent.width;
                                wrap: word-wrap;
                                height: 20px;
                            }
                        }
                    }
                }
            }
        }
        
        // Button area
        Rectangle {
            y: parent.height - 40px;
            height: 40px;
            background: #f8f9fa;
            border-radius: 6px;
            
            if progress.can-cancel: TouchArea {
                width: 80px;
                height: 30px;
                x: parent.width - 95px;
                y: 5px;
                
                clicked => { cancel-export(); }
                
                Rectangle {
                    background: parent.has-hover ? #dc3545 : #6c757d;
                    border-radius: 4px;
                    
                    Text {
                        text: "Cancel";
                        color: white;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                        font-size: 11px;
                    }
                }
            }
        }
    }
}

export component PdfExportConfigDialog inherits Rectangle {
    in-out property <bool> dialog-visible: false;
    in-out property <PdfExportConfig> config: {
        paper-format: PaperFormat.A4,
        orientation: Orientation.Portrait,
        custom-width: 210,
        custom-height: 297,
        margin-top: 25,
        margin-bottom: 25,
        margin-left: 25,
        margin-right: 25,
        base-font: "LiberationSans",
        font-size: 11,
        line-height: 14,
        include-toc: true,
        include-page-numbers: true,
        include-headers-footers: false,
        header-text: "",
        footer-text: "",
        syntax-highlighting: false,
        preserve-code-formatting: true,
        link-handling: LinkHandling.Preserve,
        image-quality: ImageQuality.Medium,
        document-title: "",
        document-author: "",
        document-subject: "",
    };
    
    callback export-pdf(PdfExportConfig);
    callback cancel-dialog();
    
    if dialog-visible: Rectangle {
        width: 600px;
        height: 700px;
        background: white;
        border-width: 2px;
        border-color: #007bff;
        border-radius: 8px;
        drop-shadow-blur: 10px;
        drop-shadow-color: #00000040;
        z: 1500;
        
        // Center on screen
        x: (parent.width - self.width) / 2;
        y: (parent.height - self.height) / 2;
        
        // Title bar
        Rectangle {
            height: 40px;
            background: #007bff;
            border-radius: 6px;
            
            Text {
                text: "PDF Export Configuration";
                color: white;
                font-size: 14px;
                font-weight: 600;
                x: 15px;
                y: 12px;
            }
        }
        
        // Content area
        ScrollView {
            y: 40px;
            height: parent.height - 80px;
            x: 15px;
            width: parent.width - 30px;
            
            Rectangle {
                height: 800px;
                
                // Paper Settings Section
                SectionHeader {
                    y: 10px;
                    title: "Paper & Layout";
                    width: parent.width;
                }
                
                FormRowCombo {
                    y: 50px;
                    label: "Paper Format";
                    current-index: config.paper-format == PaperFormat.A4 ? 0 : 
                                  config.paper-format == PaperFormat.Letter ? 1 :
                                  config.paper-format == PaperFormat.Legal ? 2 :
                                  config.paper-format == PaperFormat.A3 ? 3 :
                                  config.paper-format == PaperFormat.A5 ? 4 : 5;
                    model: ["A4", "Letter", "Legal", "A3", "A5", "Custom"];
                    width: parent.width;
                    
                    selected(index) => {
                        config.paper-format = index == 0 ? PaperFormat.A4 :
                                             index == 1 ? PaperFormat.Letter :
                                             index == 2 ? PaperFormat.Legal :
                                             index == 3 ? PaperFormat.A3 :
                                             index == 4 ? PaperFormat.A5 : PaperFormat.Custom;
                    }
                }
                
                FormRowCombo {
                    y: 90px;
                    label: "Orientation";
                    current-index: config.orientation == Orientation.Portrait ? 0 : 1;
                    model: ["Portrait", "Landscape"];
                    width: parent.width;
                    
                    selected(index) => {
                        config.orientation = index == 0 ? Orientation.Portrait : Orientation.Landscape;
                    }
                }
                
                if config.paper-format == PaperFormat.Custom: Rectangle {
                    y: 130px;
                    height: 70px;
                    width: parent.width;
                    
                    FormRowSpin {
                        label: "Width (mm)";
                        value: config.custom-width;
                        minimum: 50;
                        maximum: 500;
                        width: parent.width;
                        
                        edited(val) => {
                            config.custom-width = val;
                        }
                    }
                    
                    FormRowSpin {
                        y: 35px;
                        label: "Height (mm)";
                        value: config.custom-height;
                        minimum: 50;
                        maximum: 500;
                        width: parent.width;
                        
                        edited(val) => {
                            config.custom-height = val;
                        }
                    }
                }
                
                // Margins Section
                SectionHeader {
                    y: config.paper-format == PaperFormat.Custom ? 210px : 140px;
                    title: "Margins (mm)";
                    width: parent.width;
                }
                
                Rectangle {
                    y: config.paper-format == PaperFormat.Custom ? 250px : 180px;
                    height: 140px;
                    width: parent.width;
                    
                    FormRowSpin {
                        label: "Top";
                        value: config.margin-top;
                        minimum: 5;
                        maximum: 100;
                        width: parent.width;
                        
                        edited(val) => {
                            config.margin-top = val;
                        }
                    }
                    
                    FormRowSpin {
                        y: 35px;
                        label: "Bottom";
                        value: config.margin-bottom;
                        minimum: 5;
                        maximum: 100;
                        width: parent.width;
                        
                        edited(val) => {
                            config.margin-bottom = val;
                        }
                    }
                    
                    FormRowSpin {
                        y: 70px;
                        label: "Left";
                        value: config.margin-left;
                        minimum: 5;
                        maximum: 100;
                        width: parent.width;
                        
                        edited(val) => {
                            config.margin-left = val;
                        }
                    }
                    
                    FormRowSpin {
                        y: 105px;
                        label: "Right";
                        value: config.margin-right;
                        minimum: 5;
                        maximum: 100;
                        width: parent.width;
                        
                        edited(val) => {
                            config.margin-right = val;
                        }
                    }
                }
                
                // Typography Section
                SectionHeader {
                    y: config.paper-format == PaperFormat.Custom ? 400px : 330px;
                    title: "Typography";
                    width: parent.width;
                }
                
                Rectangle {
                    y: config.paper-format == PaperFormat.Custom ? 440px : 370px;
                    height: 105px;
                    width: parent.width;
                    
                    FormRow {
                        label: "Base Font";
                        value: config.base-font;
                        width: parent.width;
                        
                        edited(text) => {
                            config.base-font = text;
                        }
                    }
                    
                    FormRowSpin {
                        y: 35px;
                        label: "Font Size (pt)";
                        value: config.font-size;
                        minimum: 6;
                        maximum: 24;
                        width: parent.width;
                        
                        edited(val) => {
                            config.font-size = val;
                        }
                    }
                    
                    FormRowSpin {
                        y: 70px;
                        label: "Line Height (pt)";
                        value: config.line-height;
                        minimum: 8;
                        maximum: 36;
                        width: parent.width;
                        
                        edited(val) => {
                            config.line-height = val;
                        }
                    }
                }
                
                // Content Options Section
                SectionHeader {
                    y: config.paper-format == PaperFormat.Custom ? 555px : 485px;
                    title: "Content Options";
                    width: parent.width;
                }
                
                Rectangle {
                    y: config.paper-format == PaperFormat.Custom ? 595px : 525px;
                    height: 180px;
                    width: parent.width;
                    
                    FormRowCheck {
                        label: "Include Table of Contents";
                        checked: config.include-toc;
                        width: parent.width;
                        
                        toggled => {
                            config.include-toc = !config.include-toc;
                        }
                    }
                    
                    FormRowCheck {
                        y: 30px;
                        label: "Include Page Numbers";
                        checked: config.include-page-numbers;
                        width: parent.width;
                        
                        toggled => {
                            config.include-page-numbers = !config.include-page-numbers;
                        }
                    }
                    
                    FormRowCheck {
                        y: 60px;
                        label: "Include Headers & Footers";
                        checked: config.include-headers-footers;
                        width: parent.width;
                        
                        toggled => {
                            config.include-headers-footers = !config.include-headers-footers;
                        }
                    }
                    
                    FormRowCheck {
                        y: 90px;
                        label: "Syntax Highlighting";
                        checked: config.syntax-highlighting;
                        width: parent.width;
                        
                        toggled => {
                            config.syntax-highlighting = !config.syntax-highlighting;
                        }
                    }
                    
                    FormRowCheck {
                        y: 120px;
                        label: "Preserve Code Formatting";
                        checked: config.preserve-code-formatting;
                        width: parent.width;
                        
                        toggled => {
                            config.preserve-code-formatting = !config.preserve-code-formatting;
                        }
                    }
                    
                    FormRowCombo {
                        y: 150px;
                        label: "Link Handling";
                        current-index: config.link-handling == LinkHandling.Preserve ? 0 :
                                      config.link-handling == LinkHandling.RemoveFormatting ? 1 : 2;
                        model: ["Preserve", "Remove Formatting", "Convert to Footnotes"];
                        width: parent.width;
                        
                        selected(index) => {
                            config.link-handling = index == 0 ? LinkHandling.Preserve :
                                                  index == 1 ? LinkHandling.RemoveFormatting :
                                                  LinkHandling.ConvertToFootnotes;
                        }
                    }
                }
            }
        }
        
        // Button area
        Rectangle {
            y: parent.height - 40px;
            height: 40px;
            background: #f8f9fa;
            border-radius: 6px;
            
            // Cancel button
            TouchArea {
                width: 80px;
                height: 30px;
                x: parent.width - 175px;
                y: 5px;
                
                clicked => { cancel-dialog(); }
                
                Rectangle {
                    background: parent.has-hover ? #6c757d : #adb5bd;
                    border-radius: 4px;
                    
                    Text {
                        text: "Cancel";
                        color: white;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                        font-size: 11px;
                    }
                }
            }
            
            // Export button
            TouchArea {
                width: 80px;
                height: 30px;
                x: parent.width - 90px;
                y: 5px;
                
                clicked => { export-pdf(config); }
                
                Rectangle {
                    background: parent.has-hover ? #0056b3 : #007bff;
                    border-radius: 4px;
                    
                    Text {
                        text: "Export";
                        color: white;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                        font-size: 11px;
                    }
                }
            }
        }
    }
}